class Mcqpage extends StatefulWidget {
  final List<Map<String, dynamic>> randomelements;
  final int setnumber;
  const Mcqpage(
      {super.key, required this.randomelements, required this.setnumber});

  @override
  State<Mcqpage> createState() => _McqpageState();
}

class _McqpageState extends State<Mcqpage> with TickerProviderStateMixin {
  Map<int, String> selectedanswer = {};
  Timer? timer;
  Duration duration = const Duration(minutes: 1, seconds: 10);
  int countdown = 0;
  final ItemScrollController autoscroll = ItemScrollController();
  final ItemPositionsListener itemPositionsListener = ItemPositionsListener.create();
  late final AnimationController blinkcontroller;
  bool isTimerRunning = true;
  int currentIndex = 0;

  @override
  void initState() {
    super.initState();
    startTimer();
    blinkcontroller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    )..repeat();

    // Listen to the item positions to get the current index
    itemPositionsListener.itemPositions.addListener(() {
      final positions = itemPositionsListener.itemPositions.value;
      if (positions.isNotEmpty) {
        // Get the first visible index
        final visibleIndexes = positions.where((position) => position.itemLeadingEdge >= 0);
        if (visibleIndexes.isNotEmpty) {
          setState(() {
            currentIndex = visibleIndexes.first.index;
          });
        }
      }
    });
  }

  void startTimer() {
    timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (duration.inSeconds <= 0) {
        isTimerRunning = false;
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text('Time is Finished'),
          duration: Duration(seconds: 1),
        ));
        saveAllAnswers();
        timer.cancel();
        setState(() {
          countdown = 0;
        });
      } else {
        setState(() {
          countdown = duration.inSeconds;
          duration = duration - const Duration(seconds: 1);
        });
      }
    });
  }

  void saveAllAnswers() async {
    final prefs = await SharedPreferences.getInstance();
    HtmlUnescape unescape = HtmlUnescape();

    // Save selected answers
    Map<String, dynamic> decodedAnswers = selectedanswer.map((key, value) {
      return MapEntry(key.toString(), unescape.convert(value));
    });
    String answersJson = jsonEncode(decodedAnswers);
    await prefs.setString('set_${widget.setnumber}_answers', answersJson);

    // Save the entire set of questions
    List<Map<String, dynamic>> questions = widget.randomelements;
    String questionsJson = jsonEncode(questions);
    await prefs.setString('set_${widget.setnumber}_questions', questionsJson);

    log('All answers and questions saved for set ${widget.setnumber}');
  }

  @override
  Widget build(BuildContext context) {
    String formattedTime = DateFormat('HH:mm:ss')
        .format(DateTime(0).add(Duration(seconds: countdown)));
    bool isBlinking = countdown <= 60 && countdown > 0;

    return PopScope(
      canPop: true,
      onPopInvokedWithResult: (didPop, result) async =>
          await clearSavedAnswers(),
      child: Scaffold(
        appBar: AppBar(
          title: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Practice Set ${widget.setnumber}',
                style: TextStyle(fontSize: 15.sp),
              ),
              AnimatedBuilder(
                animation: blinkcontroller,
                builder: (context, child) {
                  return Opacity(
                    opacity: isBlinking ? blinkcontroller.value : 1.0,
                    child: Text(
                      formattedTime,
                      style: TextStyle(
                          fontSize: 16.sp,
                          color: countdown <= 60
                              ? Colors.red
                              : Theme.of(context)
                                  .textTheme
                                  .bodySmall
                                  ?.color),
                    ),
                  );
                },
              ),
              ElevatedButton(
                onPressed: () async {
                  List<int> attemptedQuestions = selectedanswer.keys.toList();
                  context.read<HomeBloc>().add(ReviewEvent(
                        randomelements: widget.randomelements,
                        setnumber: widget.setnumber,
                      ));

                  final selectedQuestion = await showModalBottomSheet<int>(
                    context: context,
                    enableDrag: true,
                    builder: (context) {
                      return SizedBox(
                        child: Checking(
                          randomelements: widget.randomelements,
                          setnumber: widget.setnumber,
                          attemptedQuestions: attemptedQuestions,
                        ),
                      );
                    },
                  );
                  if (selectedQuestion != null) {
                    autoscroll.jumpTo(index: selectedQuestion);
                  }
                },
                // Display the current index in the button text
                child: Text(
                  '${selectedanswer.length}/${widget.randomelements.length} - Current Index: ${currentIndex + 1}',
                ),
              ),
            ],
          ),
        ),
        floatingActionButton: FloatingActionButton(
          child: const Icon(Icons.save),
          onPressed: () {
            saveAllAnswers();
          },
        ),
        body: ScrollablePositionedList.builder(
          itemScrollController: autoscroll,
          itemPositionsListener: itemPositionsListener, // Add this listener
          itemBuilder: (context, index) {
            final question = widget.randomelements[index];
            final id = question['id'];
            final body = question['body'];
            final answers = question['answers'] as List;

            return Card(
              elevation: 2,
              child: Padding(
                padding: EdgeInsets.all(15.r),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '${index + 1}',
                          style: TextStyle(fontSize: 22.sp),
                        ),
                        Expanded(
                          child: Html(
                            data: body,
                            style: {
                              'body': Style(
                                  fontSize: FontSize(16.sp),
                                  fontWeight: FontWeight.bold)
                            },
                          ),
                        )
                      ],
                    ),
                    SizedBox(height: 10.h),
                    Text(
                      'Answers',
                      style: TextStyle(fontSize: 16.sp),
                    ),
                    for (var ans in answers)
                      GestureDetector(
                        onTap: isTimerRunning
                            ? () async {
                                setState(() {
                                  selectedanswer[index] = ans['answer'];
                                });
                                autoscroll.scrollTo(
                                    index: index + 1,
                                    duration: const Duration(milliseconds: 450));
                                final prefs = await SharedPreferences.getInstance();
                                await prefs.setString(
                                    'set_${widget.setnumber}_QN_$id',
                                    selectedanswer[index]!);
                              }
                            : null,
                        child: Container(
                          margin: EdgeInsets.symmetric(vertical: 8.h),
                          decoration: BoxDecoration(
                            border: selectedanswer[index] == ans['answer']
                                ? Border.all()
                                : null,
                            color: selectedanswer[index] == ans['answer']
                                ? const Color.fromARGB(255, 225, 222, 222)
                                : const Color.fromARGB(255, 239, 238, 238),
                          ),
                          child: Html(
                              data: ans['answer'] as String,
                              style: selectedanswer[index] == ans['answer']
                                  ? {
                                      'body': Style(
                                          fontSize: FontSize(16.sp),
                                          fontWeight: FontWeight.bold)
                                    }
                                  : {}),
                        ),
                      )
                  ],
                ),
              ),
            );
          },
          itemCount: widget.randomelements.length,
        ),
      ),
    );
  }
}
